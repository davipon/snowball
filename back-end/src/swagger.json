{
  "openapi": "3.0.0",
  "info": {
    "title": "Snowball API",
    "description": "Simple RESTful API in Express.js app.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://snowball.fly.dev/",
      "description": "Snowball Production"
    }
  ],
  "paths": {
    "/users/logIn": {
      "post": {
        "tags": ["User"],
        "summary": "User login route",
        "description": "If successfully login, server will return a token.",
        "requestBody": {
          "description": "A JSON object containing user's email and psssword",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "email": "wolf@forest.com",
                "password": "iliveinCanada"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully login and return token",
            "content": {
              "token": {
                "example": {
                  "token": "4687864541635fwf3q2rfewafoiqu3whjrfuie.chiwfhoiejfoewijfp346846"
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "errors": {
                "schema": {
                  "example": {
                    "code": "400",
                    "type": "Login failed",
                    "errors": [
                      {
                        "title": "Require email or password",
                        "field_errors": {
                          "email": "required",
                          "password": "required"
                        }
                      },
                      {
                        "title": "Incorrect data type",
                        "field_errors": {
                          "email": "string",
                          "password": "string"
                        }
                      },
                      {
                        "title": "Incorrect email or password",
                        "field_errors": {
                          "email": "incorrect",
                          "password": "incorrect"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users/register": {
      "post": {
        "tags": ["User"],
        "summary": "User register route",
        "description": "",
        "requestBody": {
          "description": "A JSON object containing user's email and psssword",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "email": "wolf@forest.com",
                "password": "iliveinCanada"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user successfully registered an account"
          },
          "400": {
            "description": "Client side error",
            "content": {
              "errors": {
                "schema": {
                  "example": {
                    "code": "400",
                    "type": "Register failed",
                    "errors": [
                      {
                        "title": "Require email or password",
                        "field_errors": {
                          "email": "required",
                          "password": "required"
                        }
                      },
                      {
                        "title": "Incorrect data type",
                        "field_errors": {
                          "email": "string",
                          "password": "string"
                        }
                      },
                      {
                        "title": "Email is used",
                        "field_errors": {
                          "email": "used"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },

    "/categories": {
      "get": {
        "tags": ["Category"],
        "summary": "Get all categories route",
        "description": "Get all categories, including main categories and sub categories",
        "responses": {
          "200": {
            "description": "successfully get all categories",
            "content": {
              "application/json": {
                "example": {
                  "categories": [
                    {
                      "id": 276,
                      "mainCategory": "Income",
                      "subCategory": "W2 Income"
                    },
                    {
                      "id": 277,
                      "mainCategory": "Income",
                      "subCategory": "Bonuses"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/records": {
      "post": {
        "tags": ["Record"],
        "summary": "User create a new record route",
        "description": "",
        "requestBody": {
          "description": "A JSON object containing title, amount, and note(option), categoryId",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Record"
              },
              "example": {
                "title": "Harry Poter Novels",
                "amount": 777,
                "note": "Christmas gift for kids",
                "userId": 7,
                "categoryId": 9
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user successfully created a record"
          },
          "400": {
            "description": "Client side error",
            "content": {
              "errors": {
                "schema": {
                  "example": {
                    "code": "400",
                    "type": "Post record failed",
                    "errors": [
                      {
                        "title": "Require reocrd title, amount or categoryId",
                        "field_errors": {
                          "record": "required",
                          "amount": "required",
                          "categoryId": "required"
                        }
                      },
                      {
                        "title": "Incorrect data type",
                        "field_errors": {
                          "title": "string",
                          "amount": "number",
                          "categoryId": "number"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/records/{:rid}": {
      "put": {
        "tags": ["Record"],
        "summary": "Update the specific record route",
        "description": "As user log in, he/she can update the specific record.",
        "parameters": [
          {
            "in": "path",
            "name": "rid",
            "description": "The record id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "description": "The new record data to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Record"
              },
              "example": {
                "title": "M1 Pro MacBook",
                "amount": 2000,
                "note": "Christmas gift for kids",
                "userId": 7,
                "categoryId": 21
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Client side error",
            "content": {
              "errors": {
                "schema": {
                  "example": {
                    "code": "400",
                    "type": "Put record failed",
                    "errors": [
                      {
                        "tile": "Require reocrd id",
                        "field_errors": {
                          "recordId": "required"
                        }
                      },
                      {
                        "title": "Require reocrd id, title, amount or categoryId",
                        "field_errors": {
                          "recordId": "required",
                          "title": "required",
                          "amount": "required",
                          "categoryId": "required"
                        }
                      },
                      {
                        "title": "Incorrect data type",
                        "field_errors": {
                          "recordId": "number",
                          "title": "string",
                          "amount": "number",
                          "categoryId": "number"
                        }
                      },
                      {
                        "title": "Record not exist",
                        "field_errors": {
                          "record": "not exist"
                        }
                      },
                      {
                        "title": "Invalid user",
                        "field_errors": {
                          "userId": "not theRecord.userId"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Record"],
        "summary": "Delete the specific record route",
        "description": "As user log in, he/she can delete the specific record.",
        "parameters": [
          {
            "in": "path",
            "name": "rid",
            "description": "The record id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 3
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Client side error",
            "content": {
              "errors": {
                "schema": {
                  "example": {
                    "code": "400",
                    "type": "Delete record failed",
                    "errors": [
                      {
                        "tile": "Require reocrd id",
                        "field_errors": {
                          "recordId": "required"
                        }
                      },
                      {
                        "title": "Incorrect data type",
                        "field_errors": {
                          "recordId": "number"
                        }
                      },
                      {
                        "title": "Record not exist",
                        "field_errors": {
                          "record": "not exist"
                        }
                      },
                      {
                        "title": "Invalid user",
                        "field_errors": {
                          "userId": "not theRecord.userId"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/records/income": {
      "get": {
        "tags": ["Record"],
        "summary": "Get the current user's all income records route",
        "description": "",
        "responses": {
          "200": {
            "description": "successfully get all income records",
            "content": {
              "application/json": {
                "example": {
                  "income records": [
                    {
                      "id": 5614,
                      "title": "Licensed Soft Shirt",
                      "amount": 595,
                      "note": "evolve e-business infrastructures",
                      "createdAt": "2022-10-26T02:38:59.574Z",
                      "updatedAt": "2022-10-26T02:38:59.574Z",
                      "userId": 47,
                      "categoryId": 276
                    },
                    {
                      "id": 5615,
                      "title": "Rustic Granite Fish",
                      "amount": 414,
                      "note": "evolve open-source portals",
                      "createdAt": "2022-09-22T18:12:45.905Z",
                      "updatedAt": "2022-10-26T02:38:59.574Z",
                      "userId": 47,
                      "categoryId": 276
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/records/expense": {
      "get": {
        "tags": ["Record"],
        "summary": "Get the current user's all expense records route",
        "description": "",
        "responses": {
          "200": {
            "description": "successfully get all expense records",
            "content": {
              "application/json": {
                "example": {
                  "expense records": [
                    {
                      "id": 688,
                      "title": "Handmade Frozen Hat",
                      "amount": 230,
                      "note": "repurpose end-to-end e-markets",
                      "createdAt": "2022-11-01T12:04:58.813Z",
                      "updatedAt": "2022-11-01T12:04:58.813Z",
                      "userId": 6,
                      "categoryId": 10
                    },
                    {
                      "id": 689,
                      "title": "Refined Granite Towels",
                      "amount": 27,
                      "note": "brand e-business supply-chains",
                      "createdAt": "2022-04-02T03:49:47.973Z",
                      "updatedAt": "2022-11-01T12:04:58.813Z",
                      "userId": 6,
                      "categoryId": 10
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/records/saving": {
      "get": {
        "tags": ["Record"],
        "summary": "Get the current user's all saving records route",
        "description": "",
        "responses": {
          "200": {
            "description": "successfully get all saving records",
            "content": {
              "application/json": {
                "example": {
                  "income records": [
                    {
                      "id": 676,
                      "title": "Bespoke Fresh Bacon",
                      "amount": 524,
                      "note": "monetize dynamic models",
                      "createdAt": "2022-11-01T12:04:58.778Z",
                      "updatedAt": "2022-11-01T12:04:58.778Z",
                      "userId": 6,
                      "categoryId": 6
                    },
                    {
                      "id": 677,
                      "title": "Practical Cotton Keyboard",
                      "amount": 716,
                      "note": "deliver granular e-markets",
                      "createdAt": "2021-06-06T23:51:26.919Z",
                      "updatedAt": "2022-11-01T12:04:58.778Z",
                      "userId": 6,
                      "categoryId": 6
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },

  "components": {
    "schemas": {
      "User": {
        "properties": {
          "email": {
            "type": "string",
            "example": "dolphin@ocean.com"
          },
          "password": {
            "type": "string",
            "example": "12345678"
          }
        },
        "required": ["email", "password"]
      },
      "Category": {
        "properties": {
          "mainCategory": {
            "type": "string",
            "example": "Income"
          },
          "subCategory": {
            "type": "string",
            "example": "Investment income"
          }
        },
        "required": ["mainCategory", "subCategory"]
      },
      "Record": {
        "properties": {
          "title": {
            "type": "string",
            "example": "Harry Poter Novels"
          },
          "amount": {
            "type": "integer",
            "example": 777
          },
          "note": {
            "type": "string",
            "example": "Christmas gift for kids"
          },
          "userId": {
            "type": "integer",
            "example": 7
          },
          "categoryId": {
            "type": "integer",
            "example": 9
          }
        },
        "required": ["title", "amount", "userId", "categoryId"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer schema.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "User",
      "description": ""
    },
    {
      "name": "Category",
      "description": ""
    },
    {
      "name": "Record",
      "description": ""
    }
  ]
}
